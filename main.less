// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// Style definitions are from
// https://github.com/chriskempson/tomorrow-theme/tree/master/Brackets

/*
 * Brackets Default Theme
 *
 * Defines all the variables that one can configure in a theme. This should
 * contain all variables / mixins for UI styling that we want to be able to
 * change in a theme.
 *
 * Throughout the rest of the LESS files we should _only_ use color
 * variable names that are on the LHS of the list below. So, if we
 * need a new color for some UI element, we should add a variable
 * in this file.
 */

/* Define some variables used in multiple places */
/* 1. Background color for the code view */
@background: #222222;
/* 2. Foreground color for the code view (Regular strings or text) */
@foreground: #d2d4d4;

/* Code Styling */

.CodeMirror, .CodeMirror-scroll {
    background-color: @background;
    color: @foreground;
}
/* NA */
.CodeMirror-focused .CodeMirror-activeline-background {
    background: #b7b7b7;
}
/* NA */
.show-line-padding .CodeMirror-focused .CodeMirror-activeline-background {
    box-shadow: inset 15px 0 0 0 #000;
}
/* NA */
.CodeMirror-focused .CodeMirror-activeline {
    .CodeMirror-gutter-elt {
        background: rgba(0, 0, 0, 0.2);
        color: #fff;
    }
 /* NA */
    .inline-widget .CodeMirror-gutter-elt {
        color: #767676;
    }
}

.cm-error, .cm-minus {color: #717171;}


@import "colors";


/* Extra CSS */

.CodeMirror-searching {
    background-color: #e2ce7e;
    color: #222222 !important;
    &.searching-current-match {
        background-color: #f5a644;
        color: #222222 !important;
    }
}

.CodeMirror-cursor {
    border-left: 1px solid #efefef !important;
}

.CodeMirror-gutters {
    background-color: @background;
    border-right: none;
}
/* sequence numbers */
.CodeMirror-linenumber {
    color: #6a6a6a;
}

/* drag & Select text ,change focus */
.CodeMirror .CodeMirror-selected {
    background: rgba(199, 199, 199, 0.3);
}

/* drag & Select text*/
.CodeMirror-focused .CodeMirror-selected {
    background: rgba(0, 149, 255, 0.4);
}

/* drag & Select text ,change focus */
.CodeMirror .CodeMirror-selected-codefolding {
    background: rgba(199, 199, 199, 0.3);
}

/* drag & Select text*/
.CodeMirror-focused .CodeMirror-selected-codefolding {
    border: solid 1px rgba(157, 163, 180, 0.8) !important;
    background: rgba(8, 31, 52, 0.5);
}

.CodeMirror-matchingbracket, .CodeMirror-matchingtag {
    /* Ensure visibility against gray inline editor background */
    background-color: #795d27;
    color: #fff!important;
}

.CodeMirror-overwrite .CodeMirror-cursor {
    border-left: none !important;
    border-bottom: 1px solid #fff;
}

/*
    CodeMirror's use of descendant selectors for certain styling causes problems when editors are
    nested because, for items in the inner editor, the left-hand clause in the selector will now
    match either the actual containing CodeMirror instance *OR* the outer "host" CodeMirror instance.

    TODO (issue #324): We'll still have problems if editors can be nested more than one level deep,
    or if any other descendant-selector-driven CM styles can differ between inner & outer editors
    (potential problem areas include line wrap and coloring theme: basically, anything in codemirror.css
    that uses a descandant selector where the CSS class name to the left of the space is something
    other than a vanilla .CodeMirror)
 */
.CodeMirror {
    .CodeMirror {
        background: transparent;
    }

    .CodeMirror .CodeMirror-gutters {
        background: transparent;
        border-right: none;
    }

    .CodeMirror .CodeMirror-activeline-background {
        background: transparent;
    }

    .CodeMirror .CodeMirror-activeline .CodeMirror-gutter-elt {
        background: transparent;
        color: #767676;
    }

    .CodeMirror-focused .CodeMirror-activeline-background {
        background: #777;
    }

    .CodeMirror-focused .CodeMirror-activeline {
        .CodeMirror-gutter-elt {
            background: rgba(0, 0, 0, 0.2);
            color: #fff;
        }
    }
}
/* dropdown icon - normal */
.CodeMirror-foldgutter-open:after {
    color: #666;
}
/* dropdown icon - when closed */
.CodeMirror-foldgutter-folded:after {
    color: #aaa;
}
/* dropdown icon - hover */
.CodeMirror.over-gutter, .CodeMirror-activeline {
    .CodeMirror-foldgutter-open:after {
        color: #888;
    }
}
/* three dotted line box */
.CodeMirror-foldmarker {
    border-color: #595b5c;
    color: #bcbcbc;
    background-color: #464748;
    box-shadow:  inset 0px 0px 1px 0px #bcbcbc;
}

/* Non-editor styling */

.image-view,
.not-editor {
    background-color: @background;
}

.view-pane .image-view {
    color: @foreground;
}
